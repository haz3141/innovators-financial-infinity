<header>
  <nav class="navbar navbar-expand-lg">
    <div class="container content">
      <a class="navbar-brand" href="/">CRYNANCE</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
        aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>

      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="nav navbar-nav navbar-right">
          <li class="nav-item active">
            <a class="nav-link" href="/charts">Charts <span class="sr-only">(current)</span></a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/trade">Exchange </a>
          </li>
          <li class="nav-item" style='margin-left: 700px; position: absolute; right: 15px;'>
            <a class="nav-link" href="/logout">Logout</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>
</header>
    <div id='coins'>
        {{!-- <h1 class='text-center' style='color: #007bff; background-color: rgba(187, 183, 183, 0.9);'>Crypto Prices</h1> --}}
        <table style='margin-bottom: 20px; border-top: solid grey 2px; border-bottom: silver 2px solid;' class="table table-secondary" id='coin-prices'>
            <thead class='headers'>
                <tr>
                    <th scope="col">Logo</th>
                    <th scope="col">Symbol</th>
                    <th scope="col">Current Price</th>
                    <th scope="col">24hr Volume</th>
                    <th scope="col">Change(24Hr)</th>
                    <th scope="col">Delete</th>
                </tr>
            </thead>
            <tbody id='prices' style='background-color: rgba(187, 183, 183, 0.9);'>
                {{#each coins}}
                <tr>
                    <td>{{coin.image}}</td>
                    <td>{{coin.symbol}}</td>
                    <td>{{coin.name}}</td>
                    <td>{{coin.currentprice}}</td>
                    <td>{{coin.volume}}</td>
                    <td>{{coin.change}}</td>
                    {{!-- <td><button class="delete-crypto" data-id="{{coin.id}}">DELETE!</button></td> --}}
                </tr>
                {{/each}}
            </tbody>
        </table>
    </div>
    <div class='container'>
        <div class='row'>
            <div class='col-2'>
            </div>
            <div class='col-4 input'>
                <form>
                    <div class="form-group">
                        <label style='margin-left: 40px; color: white; font-size: 20px; margin-left: 45px; color: rgb(46, 45, 45); margin-top: 5px;' for="crypto">Add Crypto:</label>
                        <input type="text" class="form-control" id="custom" placeholder="Enter Crypto ID">
                    </div>
                    <button type="submit" id='add' style='margin-left: 11.8px; margin-bottom: 20px; color: rgb(32, 32, 32);' class="btn btn-secondary">Add Crypto To Table</button>
                </form>
            </div>
            <div class='col-4 offset-1 input'>
                <form>
                    <div class="form-group">
                        <label style='margin-left: 40px; color: white; font-size: 20px; margin-left: 45px; color: rgb(46, 45, 45); margin-top: 5px;' for="crypto">Add Crypto:</label>
                        <input type="text" class="form-control" id="custom_graph" placeholder="Enter Crypto ID">
                    </div>
                    <button type="submit" id='graph' style='margin-left: 40px; margin-bottom: 20px; color: rgb(32, 32, 32);' class="btn btn-secondary">Create Graph</button>
                </form>
            </div>
            <div class='col-2'>
            </div>
        </div>
        <div>
             <canvas id='bitcoin-chart' style='margin-bottom: 20px; background: rgba(14, 13, 13, 0.9); padding-bottom: 20px; border: solid 2px #007bff'>
            </canvas>
            <canvas id='ethereum-chart' style='margin-bottom: 20px; background: rgba(14, 13, 13, 0.9); padding-bottom: 20px; padding-right: 20px; border: solid 2px #007bff'>
            </canvas>
        </div>
    </div>
    <style>
        .crypto {
            width: 40px;
            height: 40px;
        }

        .navbar-brand{
            font-family: 'Lato', sans-serif;
            font-size: 23px;
            letter-spacing: 1px;
            font-weight: unset;
        }

        .content {
            margin: 0;
            padding: 0;
        }

        .navbar{
            background-color: rgb(20, 19, 19);
            border-bottom: solid grey 2px;
            margin-bottom: 30px;
        }

        .headers {
            background-color: rgb(20, 19, 19);
            color: #007bff;
        }

        #coin-prices {
            padding: 0;
            margin: 0;
        }

        .input {
            display: flex;
            justify-content: center;
            align-content: space-between;
            background: rgb(146, 143, 143, 0.9);
            border: solid 2px #007bff;
            height: 150px;
            margin-top: 20px;
            position: relative;
            right: 45px;
            margin-bottom: 40px;
        }

        body {
            background-image: url("https://miro.medium.com/max/2560/1*2cdqBbOJUdvqGVKxAi1JtA.png");
            background-size: cover;
            background-position: center;
        }


    </style>
    <script>
    $(document).ready(function() {
        //making initial charts//
        function add_data() {
            var queryURL = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin,ethereum,litecoin'
            $.ajax({
                url: queryURL,
                method: 'GET'
            }).then(function(response) {
                let bitcoinPrice = response[0].current_price
                let ethPrice = response[1].current_price
                let today = new Date()
                let time = today.getHours() + ':' + today.getMinutes() + today.getSeconds();
                let userData = {
                    price: bitcoinPrice,
                    current_time: time
                }
                let userDataTwo = {
                    ethprice: ethPrice,
                    time: time
                }
                $.ajax('/api/graphs', {
                    type: 'POST',
                    data: userData
                }).then(function(response) {
                    console.log(JSON.stringify(response))
                })

                $.ajax('/api/lines', {
                    type: 'POST',
                    data: userDataTwo
                }).then(function(response) {
                    console.log(JSON.stringify(response))
                })
            })
            setInterval(add_data, 60000)
        }

        function refresh() {
            window.location.reload()
        }

        setTimeout(refresh, 30000)

        function getData(chart, label, data) {
            console.log(bitcoinChart.data.datasets[0].data)
            $.ajax('/api/graphs', {
                type: 'GET'
            }).then(function(response) {
                for (let i = 0; i < response.length; i++) {
                    bitcoinChart.data.datasets[0].data.push(response[i].price)
                    bitcoinChart.data.labels.push(response[i].current_time)
                    bitcoinChart.update()
                }
            })
            $.ajax('/api/lines', {
                type: 'GET'
            }).then(function(response) {
                for (let j = 0; j < response.length; j++) {
                    ethChart.data.datasets[0].data.push(response[j].ethprice)
                    ethChart.data.labels.push(response[j].time)
                    ethChart.update()
                }
            })
            setInterval(getData, 60000)
        } 
        //changing chart css//
        Chart.defaults.global.defaultFontColor = 'white'
        Chart.defaults.global.title.fontSize = 20

        const ctx = document.getElementById('bitcoin-chart').getContext('2d');
        const ctxTwo = document.getElementById('ethereum-chart').getContext('2d');

        var gradientStroke = ctxTwo.createLinearGradient(500, 0, 100, 0);
        gradientStroke.addColorStop(0, "#80b6f4");
        gradientStroke.addColorStop(1, "#f49080");

        var gradientStrokeTwo = ctx.createLinearGradient(500, 0, 100, 0);
        gradientStrokeTwo.addColorStop(0, '#684dad')
        gradientStrokeTwo.addColorStop(0.5, '#6bb1bf')
        gradientStrokeTwo.addColorStop(1, '#c1f215')
        //main chart settings//
        let bitcoinChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                    data: [],
                    label: 'bitcoin',
                    borderColor: gradientStrokeTwo,
                    pointBorderColor: gradientStrokeTwo,
                    pointBackgroundColor: gradientStrokeTwo,
                    pointHoverBackgroundColor: gradientStrokeTwo,
                    pointHoverBorderColor: gradientStrokeTwo,
                    fill: false,
                    },
                ]
            },
            options: {
                title: {
                    display: true,
                    text: 'Bitcoin Price Chart'
                },
                legend: {
                    display: true
                },
                elements: {
                    line: {
                        tension: 0
                    }
                },
                responsive: true,
                scales: {
                    yAxes: [{
                        display: true,
                        gridLines: {
                            display: true,
                            color: 'grey'
                        },
                        ticks: {
                            steps: 10,
                            stepSize: 500,
                            beginAtZero: false,
                            suggestedMax: 10000,
                            suggestedMin: 5000
                        }
                    }],
                    xAxes: [{
                        display: false
                    }]
                }
            }
        })

        let ethChart = new Chart(ctxTwo, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                    data: [],
                    label: 'Ethereum',
                    borderColor: gradientStroke,
                    pointBorderColor: gradientStroke,
                    pointBackgroundColor: gradientStroke,
                    pointHoverBackgroundColor: gradientStroke,
                    pointHoverBorderColor: gradientStroke,
                    fill: false,
                    },
                ]
            },
            options: {
                title: {
                    display: true,
                    text: 'Ethereum Price Chart'
                },
                legend: {
                    display: true
                },
                elements: {
                    line: {
                        tension: 0
                    }
                },
                responsive: true,
                scales: {
                    yAxes: [{
                        display: true,
                        gridLines: {
                            display: true,
                            color: 'grey'
                        },
                        ticks: {
                            steps: 8,
                            stepSize: 50,
                            beginAtZero: false,
                            suggestedMax: 500,
                            suggestedMin: 100
                        }
                    }],
                    xAxes: [{
                        display: false
                    }]
                }
            }
        })
        //setting the time between each data point
        //calling functions when the page starts
        add_data()
        getData()
        //making custom graphs and table graphs from user data//
        //add new post to store data//
        function setup() {
            $('#prices').empty()
            let queryURL = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin,ethereum,litecoin&price_change_percentage=24hr'
            $.ajax({
                url: queryURL,
                method: 'GET'
            }).then(function(response) {
                console.log(response)
                for (let i = 0; i < response.length; i++) {
                    let upperCase = response[i].symbol.toUpperCase()
                    let image = $('<img>').attr('src', response[i].image).addClass('crypto')
                    let change = response[i].price_change_percentage_24h.toFixed(2);
                    let newRows = $('<tr>').append(
                        $('<td>').append(image),
                        $('<td>').text(upperCase),
                        $('<td>').text('$' + response[i].current_price),
                        $('<td>').text('$' + response[i].total_volume),
                        $('<td>').text(change + '%')
                    )
                    $('#coin-prices').append(newRows);
                }
                $.ajax({
                url: '/api/charts',
                method: 'GET'
                }).then(function(response) {
                    for (let i = 0; i < response.length; i++)  {
                        console.log('the response', response);
                        let change = parseFloat(response[i].change).toFixed(2);
                        let image = $('<img>').attr('src', response[i].image).addClass('crypto')
                        console.log('change', parseFloat(change).toFixed(2));
                        let newRows = $('<tr>').append(
                        $('<td>').append(image),
                        $('<td>').text(response[i].symbol),
                        $('<td>').text('$' + response[i].currentprice),
                        $('<td>').text('$' + response[i].volume),
                        $('<td>').text(change + '%')
                    )
                    $('#coin-prices').append(newRows);
                }
            })
            }) 
        }

        function userResponse() {
            let add = $('#custom').val().trim()
            let queryURL = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=' + add + '&price_change_percentage=24hr'
            $.ajax({
                url: queryURL,
                method: 'GET'
            }).then(function(response) {
                console.log('the response', response);
                let upperCase = response[0].symbol.toUpperCase()
                let image = $('<img>').attr('src', response[0].image).addClass('crypto')
                let userData = {
                    image: response[0].image,
                    symbol: upperCase,
                    currentprice: response[0].current_price,
                    volume: response[0].total_volume,
                    change: response[0].price_change_percentage_24h
                }
                $.ajax('/api/charts', {
                    type: 'POST',
                    data: userData
                }).then(function(res) {
                    console.log('added crypto', res)
                    window.location.reload()
                })
            })
        }

        function userGraph() {
            let add = $('#custom_graph').val().trim()
            let queryURL = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=' + add + '&price_change_percentage=24hr'
            $.ajax({
                url: queryURL,
                method: 'GET'
            }).then(function(response) {
                console.log(response)

            })
        }
        //**notes**//
        //build user custom made graphs//
        //calling setup immediately to build the table//
        setup()
        //on click add the users crypto to table and graph//
        $('#add').on('click', function(event) {
            event.preventDefault()
            userResponse()
        })

        $('#graph').on('click', function(event) {
            event.preventDefault()
            userGraph()
        })
    })
</script>

        

